// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a[15]=false,a[0..14]=instruction[0..14],b=aluOut,sel=instruction[15],out=toAOut);
    
    Not(in=instruction[15],out=nIns15);
    And(a=instruction[15],b=instruction[5],out=cInsAload);
    Or(a=nIns15,b=cInsAload,out=aLoad);
    ARegister(in=toAOut,load=aLoad,out=aRegOut,out[0..14]=addressM);
    
    Mux16(a=aRegOut,b=inM,sel=instruction[12],out=amSelectedValue);
    
    And(a=instruction[15],b=instruction[4],out=dload);
    DRegister(in=aluOut,load=dload,out=dRegOut);
    
    And(a=instruction[15],b=instruction[11],out=ins11ANDins15);
    And(a=instruction[15],b=instruction[10],out=ins10ANDins15);
    And(a=instruction[15],b=instruction[9],out=ins9ANDins15);
    And(a=instruction[15],b=instruction[8],out=ins8ANDins15);
    And(a=instruction[15],b=instruction[7],out=ins7ANDins15);
    And(a=instruction[15],b=instruction[6],out=ins6ANDins15);
    
    ALU(x=dRegOut,y=amSelectedValue,zx=ins11ANDins15,nx=ins10ANDins15,zy=ins9ANDins15,ny=ins8ANDins15,f=ins7ANDins15,no=ins6ANDins15,out=aluOut,out=outM,zr=aluZr,ng=aluNg);
    
    Or(a=aluNg,b=aluZr,out=aluNgOrZr);
    Not(in=aluNgOrZr,out=notAluNgOrZr);
    And(a=instruction[2],b=aluNg,out=condition1);
    And(a=instruction[1],b=aluZr,out=condition2);
    And(a=instruction[0],b=notAluNgOrZr,out=condition3);
    Or(a=condition1,b=condition2,out=condition12);
    Or(a=condition12,b=condition3,out=condition123);
    And(a=instruction[15],b=condition123,out=jumpValid);
    
    PC(in=aRegOut,load=jumpValid,inc=true,reset=reset,out[0..14]=pc);
    
    And(a=instruction[15],b=instruction[3],out=writeM);
}